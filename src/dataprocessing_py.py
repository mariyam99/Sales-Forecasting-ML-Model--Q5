# -*- coding: utf-8 -*-
"""dataprocessing.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bR7DBeP8_g2qVaiZ1mGRx86Zu1RSo0mJ
"""

"""
cd /content/drive/MyDrive/Question 5 - ML
"""

"""
from google.colab import files
upload = files.upload()

"""

'''
data pre-processing
 Load transactions and outlet information data. Remove the invoice number columns.
 '''

import pandas as pd
from sklearn.preprocessing import StandardScaler
from scipy.stats import zscore


def load_data(transactions_path, outlet_info_path):

    transactions = pd.read_csv('/content/drive/MyDrive/Question 5 - ML/training_data.csv')
    outlet_info = pd.read_csv('/content/drive/MyDrive/Question 5 - ML/outlet_info.csv')
    test_data = pd.read_csv('/content/drive/MyDrive/Question 5 - ML/test_data.csv')


     # Ensure that the date_id column is parsed as a datetime object
    transactions['date_id'] = pd.to_datetime(transactions['date_id'])
    test_data['date_id'] = pd.to_datetime(test_data['date_id'])


    #combination of train and test
    combined = pd.concat([transactions, test_data], axis=0)

    # Merge datasets on 'store'
    data = pd.merge(combined, outlet_info, on='store', how='left')

    #remove columns
    train_data = data.drop(['invoice_num'], axis=1)


    # Calculate Z-scores for 'item_qty' and 'net_sales' # remove of outliers
    train_data['item_qty_zscore'] = zscore(train_data['item_qty'])
    train_data['net_sales_zscore'] = zscore(train_data['net_sales'])

    # Remove outliers where Z-score > 3 or < -3
    filtered_data = train_data[(train_data['item_qty_zscore'].abs() <= 3) &
                            (train_data['net_sales_zscore'].abs() <= 3)]
    return filtered_data